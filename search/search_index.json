{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MyFinances Python Client","text":"<p>The MyFinances Python Client provides a seamless way to interact with the MyFinances API for creating invoices, managing customers, and handling other finance-related operations directly from your Python code.</p> <ul> <li> <p> Get Started Quickly</p> <p>Install <code>myfinances</code> with <code>pip</code> and get up and running within minutes.</p> <p> Getting Started</p> </li> <li> <p> Release Notes</p> <p>View recent updates and changes. Be sure to check the changelog for any breaking changes.</p> <p> Changelog</p> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"contributing/","title":"Contributing","text":"List GridTable Code Contributions Documentation Contributions Feature Statuses Maintenance &amp; Core <code>Project Setup</code> <code>Helping write documentation</code> <code>Github Issues</code> <code>Take on a lead position</code> <code>How  to ask for help</code> <code>Translations</code> <code>Project Board</code> <code>Motivation</code> <code>Style Guide</code> <code>Development Progression</code>"},{"location":"contributing/#code-contributions","title":"Code Contributions","text":"<p>Project Setup</p> <p>How to ask for help</p> <p>Style Guide</p>"},{"location":"contributing/#documentation-contributions","title":"Documentation Contributions","text":"<p>Helping write documentation</p> <p>Translations</p>"},{"location":"contributing/#feature-status","title":"Feature Status","text":"<p>Github Issues</p> <p>Project Board</p>"},{"location":"contributing/#maintenance-core","title":"Maintenance &amp; Core","text":"<p>Take on a lead position</p> <p>Motivation</p> <p>Development Progression</p>"},{"location":"contributing/ask/","title":"Asking for help","text":"<p>Use <code>Github Discussions</code> to ask any questions, put forward any ideas, or  vote on our polls!</p>"},{"location":"contributing/development-progression/","title":"Development Progression","text":"<p>Coming Soon</p>"},{"location":"contributing/gh-board/","title":"Github Project Board","text":"<p>We may use the <code>Project Board</code> feature on github to track progress on features  or bugs. This is locked to maintainers only and readonly for the public - but it's still good to check up on active/inactive  issues!</p>"},{"location":"contributing/gh-issues/","title":"Github Issues","text":"<p>Our main development area for this project is our Github. On github you can create  <code>Issues</code>. These are a sort of discussion that you can open which keeps lots of messages, code snippets and progress in one place.</p> <p>When suggesting an idea, we would rather you first start off a <code>discussion</code>. This allows us to talk about the idea  before any development is made on it. After we'll convert it to an <code>Issue</code>.</p> Found a bug? <p>Use Github Issues for bug reports too! You can fill in the <code>Bug Report Form</code> to report these bugs to help us reproduce them.</p>"},{"location":"contributing/lead-position/","title":"Taking on a lead position","text":"<p>Currently we have no soon to come lead positions in mind. After the project calms down and core features are added, I may  start to consider accepting someone else as a maintainer. Contact me if you'd be interested in this!</p>"},{"location":"contributing/motivation/","title":"Motivation","text":"Note <p>This is a message from the maintainer and project owner, <code>@trey</code>.</p> <p>Personally, I use <code>Umami</code> for every project. It allows me to easily see what parts of my sites are most  used. I chose Umami as they allow self-hosting and are privacy focused - cool right!  Okay cool... but why did I create <code>Django-Umami</code>, and what's the difference?</p> <p>Well django-umami is a library aimed to help integrate your own umami analytics through your django site. Typically, to use  Umami you'd use a HTML <code>&lt;script&gt;</code> tag with an <code>data-website-id</code> that links to your website-id. But this has one  problem - it's public!? Anyone can use this website ID and fake traffic to your site. This is one major flaw of Umami. I did  create a security report of this on their Github, but they took no care of it, simply accepting the issue.</p> <p>So I thought, why not make an easy-to-use backend integration. This way users don't get told your secret key. The only real  downside to this is that you're backend is making outbound requests and you lose a lot of the user data such as Device Type,  Screen Size, location, etc etc.</p>"},{"location":"contributing/motivation/#tldr","title":"TLDR","text":"<p>Positives</p> <ul> <li>Able to hide secret website-id</li> <li>Able to customise event names, urls, and any other data </li> </ul> <p>Negatives</p> <ul> <li>Your backend will make requests, not the users client. So you'll have higher outbound bandwidth  </li> <li>You lose some user information, such as device type and screen size</li> </ul>"},{"location":"contributing/setup/","title":"Setup project","text":"<p>To setup the project follow our <code>Getting Started</code> guide. It goes through initial install,  configuration setup, and basic usage. To contribute to the project you need to test your changes really, so we suggest setting  up a new django project (v5 would be ideal) and installing and testing django-umami on that.</p>"},{"location":"contributing/style-guide/","title":"Style guide","text":"<p>Coming Soon</p>"},{"location":"contributing/translations/","title":"Translations","text":"<p>Currently we have no translations or a translation framework. If you have ideas for how we could implement translations feel  free to make an issue on github and suggest it for our docs!</p>"},{"location":"contributing/writing-documentation/","title":"Writing Documentation","text":"<p>Coming Soon</p>"},{"location":"user-guide/getting-started/","title":"Quick Start","text":"<p>To get started with the MyFinances Python Client, follow these steps.</p>"},{"location":"user-guide/getting-started/#install","title":"Install","text":"<p>Install the package via pip:</p> <pre><code>pip install myfinances\n</code></pre>"},{"location":"user-guide/getting-started/#initialize-the-client","title":"Initialize the Client","text":"<p>Create an instance of <code>MyFinancesClient</code> by specifying your API base URL and API key:</p> <pre><code>from myfinances import MyFinancesClient\n\nclient = MyFinancesClient(base_url=\"https://api.myfinances.com\", api_key=\"YOUR_API_KEY\")\n</code></pre>"},{"location":"user-guide/getting-started/#basic-usage","title":"Basic Usage","text":"<p>Here are some example usages to get you started:</p>"},{"location":"user-guide/getting-started/#list-all-invoices","title":"List All Invoices","text":"<pre><code>invoices = client.invoices.list_invoices()\nprint(invoices)\n</code></pre> <p>For more in-depth guides, see: - Installation - Configuration - Usage</p>"},{"location":"user-guide/getting-started/installation/","title":"Installation","text":"<p><code>django_umami</code> doesn't need a database, caches, middleware. All it needs is outbound internet access to your Umami Server.</p> <p>To install the package, you can use any of these providers:</p> PyPi (pip)Github Source <pre><code># Latest\npip install django-umami\n\n# Specific Release\npip install django-umami@0.3.0\n</code></pre> <pre><code># Latest\npip install git+https://github.com/TreyWW/django-umami\n\n# Specific Release\npip install git+https://github.com/TreyWW/django-umami.git@v0.3.0\n</code></pre>"},{"location":"user-guide/getting-started/settings/","title":"Settings","text":"<p>To use django-umami efficiently, it's best to configure it exactly to your needs, right! To do this you can use either use environment variables or manually call the methods.</p>"},{"location":"user-guide/getting-started/settings/#using-environment-variables","title":"Using environment variables","text":".env<pre><code>UMAMI_PAGE_URL=https://mysite.com\nUMAMI_WEBSITE_ID=1234-1234-1234\nUMAMI_TRACKING_ENABLED=True\n</code></pre>"},{"location":"user-guide/getting-started/settings/#using-umami-object","title":"Using umami object","text":"<p>Tip</p> <p>Make sure to import any files needed first!</p> CoreDecoratorsOnly what you need <pre><code>import django_umami.core\n\ndjango_umami.core.umami.options...\n</code></pre> <pre><code>import django_umami.decorators\n\n@django_umami.decorators...\n</code></pre> <pre><code>from django_umami.core import umami\n\numami.options...\n</code></pre>"},{"location":"user-guide/getting-started/settings/#method-set-host-url","title":"Method - Set Host URL","text":"<p>Set Host URL</p> DescriptionDefinitionUsage <p>This allows you to set the main host URL of umami. This is only required if you have not set it via the <code>UMAMI_PAGE_URL</code>  environment variable.</p> PARAMETER DESCRIPTION REQUIRED host_url  (string) Your analytics site url E.g. <code>https://mysite.com</code> <pre><code>from django_umami.core import umami\n\numami.options.set_host_url(\"https://example.com\")\n</code></pre>"},{"location":"user-guide/getting-started/settings/#method-set-website-id","title":"Method - Set Website ID","text":"<p>Set Website ID</p> DescriptionDefinitionUsage <p>This allows you to set the main host URL of umami. This is only required if you have not set it via the <code>UMAMI_WEBSITE_ID</code>  environment variable.</p> PARAMETER DESCRIPTION REQUIRED website_id  (string - uuid) Your website id E.g. <code>12345678-12345....</code> <pre><code>from django_umami.core import umami\n\numami.options.set_website_id(\"123456\")\n</code></pre>"},{"location":"user-guide/getting-started/settings/#method-create-session","title":"Method - Create Session","text":"<p>Using Sessions</p> DescriptionUsage <p>Sessions allow for requests to your Umami server to be streamed in one session. This allows for requests to take  around a third of the time a standard request would take!</p> <pre><code>from django_umami.core import umami\n\numami.options.create_session()\n</code></pre>"},{"location":"user-guide/getting-started/usage/core/","title":"Core usage","text":"umami.track() Examples <pre><code>import django_umami.core\n\ndef my_function():\n    django_umami.core.umami.track(\"someone went to my function!\")\n\n    data = django_umami.core.UmamiEventData(\n        hostname=\"example.com\",\n        language = \"en-GB\",\n        referrer = \"\",\n        screen = \"1920x1080\",\n        title = \"abc\",\n        url = \"/my_event\",\n        name = \"My Custom Event\"\n    )\n\n    django_umami.core.umami.track(data)\n\n    django_umami.core.umami.track({\n        \"name\": \"My Custom Event\",\n        \"url\": \"/my_page/123\"\n    })\n</code></pre> umami.track_event_name() DescriptionDefinitionExamples <p>Track using just an event name</p> PARAMETER DESCRIPTION REQUIRED event_name (string) The text of the event you'd like to send. <pre><code>from django_umami.core import umami\n\numami.track_event_name(\"My event\")\n</code></pre> umami.send() DescriptionDefinitionsExample <p>This is the manual method for sending a raw event</p> PARAMETER DESCRIPTION REQUIRED payload  (UmamiPayload) <pre><code>from django_umami.core import umami\n\numami.send({\n    \"website\": \"12345-6789...\",\n    \"data\": {\n        \"name\": \"my event\"\n    }\n})\n</code></pre>"},{"location":"user-guide/getting-started/usage/dataclasses/","title":"Dataclasses","text":"NOTE: Basic Usage <p>To use a dataclass, you can either use it directly or by using a dictionary.</p> <pre><code>Umami(UmamiConfig(enabled=True))\n\n# or\n\nUmami({\"enabled\": True})\n</code></pre> <p>It's up to you. But with an IDE such as one from JetBrains you'll get these type hints even for dictionaries.</p>"},{"location":"user-guide/getting-started/usage/dataclasses/#dataclass-umamiconfig-source","title":"Dataclass - UmamiConfig <sub><sup>(Source)</sup></sub>","text":"Class - UmamiConfig DefinitionMethods PARAMETER DATA TYPE EXAMPLE DESCRIPTION REQUIRED enabled boolean True Whether django_umami should be enabled. This is good to temporarily turn off tracking without removing all decorators etc. host_url string \"https://mysite.com/\" The main URL where your umami is hosted. The BASE url NOT including anything like <code>script.js</code> or <code>/api/send</code> website_id string (uuid) \"a123b4c5-xxxx-xxxx-xxxx-xxxxxxxxx\" The website ID of the website object in Umami. Go to Websites -&gt; Edit to copy the ID. session requests.Session Don't add to this manually, use <code>create_session()</code> to create the session. NAME PARAMETERS DESCRIPTION create_session Used to create a session that will allow requests to your Umami server to be made much faster. close_session This will close any active session Umami is using. set_enabled enabled (bool) Sets the value of enabled to whatever you pass in. This will enable/disable django_umami. Django will still perform normally even if disabled. set_host_url host_url (string) Sets the value of host_url to whatever you pass in. This will globally set it for all future calls. set_website_id website_id (string) Sets the value of website_id to whatever you pass in. This will globally change the website ID for all future calls."},{"location":"user-guide/getting-started/usage/dataclasses/#dataclass-umamieventdata-source","title":"Dataclass - UmamiEventData <sub><sup>(Source)</sup></sub>","text":"Class - UmamiConfig PARAMETER DATA TYPE EXAMPLE REQUIRED hostname string \"My Host\" language string \"en-GB\" referrer string \"https://example.com\" screen string \"1920x1080\" title string \"my site | Page One\" url string \"/page1/blob/ name string \"Someone visited my site!?\""},{"location":"user-guide/getting-started/usage/dataclasses/#dataclass-umamipayload-source","title":"Dataclass - UmamiPayload <sub><sup>(Source)</sup></sub>","text":"Class - UmamiPayload DefinitionUsage PARAMETER DATA TYPE EXAMPLE REQUIRED website str \"xxxxx-xxxx-xxxx-xxxx\" data UmamiEventData {\"name\": \"blob\"} <pre><code>import django_umamo.core\n\npayload = django_umami.core.UmamiPayload(website=\"xyz\")\npayload = {\"website\": \"xyz\"}\n</code></pre>"},{"location":"user-guide/getting-started/usage/dataclasses/#main-class-umami-source","title":"Main Class - Umami <sub><sup>(Source)</sup></sub>","text":"Main Class - Umami DefinitionMethodsUsage PARAMETER DATA TYPE EXAMPLE REQUIRED options UmamiConfig {\"enabled\": True, ...} NAME INFO RETURNS check_website_settings Used to check if settings are valid and should send request bool send Used to send raw request track Used to send tracking events (wrapper around send) UmamiResponse track_event_name Used to send just an event name (wrapper around send) UmamiResponse <pre><code>import django_umamo.core\n\ndjango_umami.core.umami.check_website_settings()\n</code></pre>"},{"location":"user-guide/getting-started/usage/decorators/","title":"Decorator Usage","text":"@track Event NameEvent Data DescriptionDefinitionExample <p>...</p> PARAMETER DESCRIPTION REQUIRED event  (string) The text of the event you'd like to send event_data (UmamiEventData) The data of the event <p>Example</p> <pre><code>import django_umami.decorators\n\n@django_umami.decorators.track(\"Someone called my function!\")\ndef myview(...)\n    ...\n</code></pre> DescriptionDefinitionExample <p>Blah</p> PARAMETER DESCRIPTION REQUIRED event  (UmamiEventData) The data of the event <p>Example</p> <pre><code>import django_umami.decorators\n\n@django_umami.decorators.track({\"name\": \"Someone called my view!\"})\ndef myview(...)\n</code></pre> @track_visit DescriptionDefinitionExample <p>This will automatically fill in details about your view, e.g. <code>URL Path</code>, <code>Referrer</code> and <code>Page Title</code>. You can override any values needed though!</p> PARAMETER DESCRIPTION REQUIRED event_data  (UmamiEventData) The data of the event <p>Example</p> <pre><code>import django_umami.decorators\n\n@django_umami.decorators.track_visit()\ndef myview(...)\n</code></pre>"},{"location":"user-guide/getting-started/usage/middleware/","title":"Middleware","text":""},{"location":"user-guide/getting-started/usage/middleware/#setup","title":"Setup","text":"<p>Add <code>\"django_umami.middleware.TrackAllViewsMiddleware\"</code> to your django settings. Example below.</p> Example <pre><code>MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"django_umami.middleware.TrackAllViewsMiddleware\" ## ADD THIS LINE\n]\n</code></pre> <p>And that's it! You are now tracking all views automatically.</p> <p>Be aware, this may cause extra latency between requests  especially if your django server location is far away from the Umami server location.</p>"},{"location":"user-guide/getting-started/usage/middleware/#settings","title":"Settings","text":"<p>Of course, we allow you to modify who you want to track :)</p>"},{"location":"user-guide/getting-started/usage/middleware/#option-filter-static","title":"OPTION - Filter static","text":"Filter static DescriptionUsage <p>Setting this to <code>True</code> will block out all requests made to static sources. By default, this is enabled.</p> <pre><code>from django_umami.core import umami\n\numami.options.filter_static = True\n</code></pre>"},{"location":"user-guide/getting-started/usage/middleware/#option-filter-media","title":"OPTION - Filter media","text":"Filter media DescriptionUsage <p>Setting this to <code>True</code> will block out all requests made to media sources such as user profile pictures. By default,  this is enabled.</p> <pre><code>from django_umami.core import umami\n\numami.options.filter_media = True\n</code></pre>"},{"location":"user-guide/getting-started/usage/middleware/#option-filter-anonymous","title":"OPTION - Filter anonymous","text":"Filter anonymous DescriptionUsage <p>Setting this to <code>True</code> will block out all requests made from unauthenticated users. By default,  this is disabled and all visits will be tracked.</p> <pre><code>from django_umami.core import umami\n\numami.options.filter_anonymous = True\n</code></pre>"},{"location":"user-guide/getting-started/usage/middleware/#option-filter-superuser","title":"OPTION - Filter superuser","text":"Filter superuser DescriptionUsage <p>Setting this to <code>True</code> will block out all requests made by super users. By default,  this is enabled.</p> <pre><code>from django_umami.core import umami\n\numami.options.filter_superusers = True\n</code></pre>"},{"location":"user-guide/getting-started/usage/middleware/#option-filter-admin-pages","title":"OPTION - Filter admin pages","text":"Filter admin pages DescriptionUsage <p>Setting this to <code>True</code> will block out all requests made to /admin pages. By default,  this is disabled.</p> <pre><code>from django_umami.core import umami\n\numami.options.admin_pages = True\n</code></pre>"},{"location":"user-guide/getting-started/usage/middleware/#option-filter-custom-pages-by-path","title":"OPTION - Filter custom pages (by path)","text":"Filter custom pages by path DescriptionUsage <p>Adding a path to this list will block all tracking for it.</p> <pre><code>from django_umami.core import umami\n\numami.options.filter_page_paths.append(\"/dashboard/\")\n</code></pre>"},{"location":"user-guide/getting-started/usage/middleware/#option-filter-custom-pages-by-url-name","title":"OPTION - Filter custom pages (by URL name)","text":"Filter custom pages by URL name DescriptionUsage <p>Adding a URL Name (name=\"blah\" in urls) to this list will block all tracking for it.</p> <pre><code>from django_umami.core import umami\n\numami.options.filter_page_url_names.append(\"dashboard\")\n</code></pre>"}]}